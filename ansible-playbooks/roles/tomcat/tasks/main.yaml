---
# ==========================================================
# ROLE: tomcat
# FILE: tasks/main.yaml
# PURPOSE: Automate Tomcat installation, configuration, and WAR deployment
# ==========================================================

# ----------------------------------------------------------
# TASK: Ensure apt cache is up-to-date
# Module: apt
# Purpose:
#   - Updates the system package cache before installing packages.
#   - Ensures Ansible always has access to the latest package versions.
# Key Parameters:
#   update_cache: yes → refresh package lists.
#   cache_valid_time: 3600 → reuse cache if it’s under 1 hour old.
# ----------------------------------------------------------
- name: Ensure apt cache is up-to-date
  become: yes
  apt:
    update_cache: yes
    cache_valid_time: 3600

# ----------------------------------------------------------
# TASK: Install required packages (Java + Python)
# Module: apt
# Purpose:
#   - Installs Java (needed for Tomcat) and Python3 (required by Ansible on remote host).
# Key Parameters:
#   name: list of packages to install.
#   state: present → ensure installed.
#   install_recommends: no → keeps installation minimal.
# ----------------------------------------------------------
- name: Install required packages (Java + python3)
  become: yes
  apt:
    name:
      - "{{ java_package }}"
      - python3
      - python3-apt
    state: present
    install_recommends: no

# ----------------------------------------------------------
# TASK: Create tomcat group
# Module: group
# Purpose:
#   - Creates a dedicated Linux group for running Tomcat securely.
# ----------------------------------------------------------
- name: Create tomcat group
  become: yes
  group:
    name: "{{ tomcat_group }}"
    state: present

# ----------------------------------------------------------
# TASK: Create tomcat user
# Module: user
# Purpose:
#   - Creates a system user dedicated to Tomcat with no login shell for security.
#   - create_home: no → no home directory.
#   - shell: /bin/false → cannot log in interactively.
# ----------------------------------------------------------
- name: Create tomcat user
  become: yes
  user:
    name: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    create_home: no
    system: yes
    shell: /bin/false

# ----------------------------------------------------------
# TASK: Download Tomcat tarball
# Module: get_url
# Purpose:
#   - Downloads the Tomcat archive from Apache servers or an internal repo.
#   - dest: where the tar.gz file is saved.
#   - mode: '0644' → readable by all.
# ----------------------------------------------------------
- name: Download Tomcat tarball
  become: yes
  get_url:
    url: "{{ tomcat_tarball_url }}"
    dest: "/tmp/tomcat.tar.gz"
    mode: '0644'

# ----------------------------------------------------------
# TASK: Extract Tomcat archive
# Module: unarchive
# Purpose:
#   - Extracts Tomcat tarball into /opt directory.
#   - remote_src: yes → indicates the archive is already on the target host.
#   - creates: skips extraction if target directory already exists.
# ----------------------------------------------------------
- name: Extract Tomcat
  become: yes
  unarchive:
    src: "/tmp/tomcat.tar.gz"
    dest: "/opt/"
    remote_src: yes
    creates: "{{ tomcat_install_dir }}"

# ----------------------------------------------------------
# TASK: Set ownership for Tomcat installation directory
# Module: file
# Purpose:
#   - Ensures all Tomcat files belong to tomcat user and group.
#   - recurse: yes → apply ownership recursively to all files/subdirs.
# ----------------------------------------------------------
- name: Ensure tomcat_install_dir owned by tomcat user
  become: yes
  file:
    path: "{{ tomcat_install_dir }}"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    recurse: yes

# ----------------------------------------------------------
# TASK: Deploy tomcat-users.xml (with admin/manager roles)
# Module: template
# Purpose:
#   - Replaces tomcat-users.xml with a templated version containing admin users.
#   - mode: '0644' → read by all, write by root only.
# ----------------------------------------------------------
- name: Copy tomcat-users.xml with Manager/Admin users
  become: yes
  template:
    src: tomcat-users.xml.j2
    dest: "{{ tomcat_install_dir }}/conf/tomcat-users.xml"
    owner: root
    group: root
    mode: '0644'
  notify: Restart Tomcat

# ----------------------------------------------------------
# TASK: Modify context.xml to allow all IPs for Manager and Host Manager
# Module: blockinfile
# Purpose:
#   - Inserts a Valve configuration to disable IP restriction (allow all IPs).
#   - marker: adds clear begin/end markers for managed blocks.
#   - with_items: applies the same block to both manager and host-manager.
# ----------------------------------------------------------
- name: Ensure RemoteAddrValve allows all IPs in Manager and Host Manager
  become: yes
  blockinfile:
    path: "{{ item }}"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    block: |
      <Valve className="org.apache.catalina.valves.RemoteAddrValve" allow=".*" />
  with_items:
    - "{{ tomcat_install_dir }}/webapps/manager/META-INF/context.xml"
    - "{{ tomcat_install_dir }}/webapps/host-manager/META-INF/context.xml"
  notify: Restart Tomcat

# ----------------------------------------------------------
# TASK: Deploy application WAR file
# Module: copy
# Purpose:
#   - Copies the built WAR file from control node (Jenkins) to the Tomcat webapps folder.
#   - owner/group ensure Tomcat can read it.
# ----------------------------------------------------------
- name: Deploy WAR file (from control node)
  become: yes
  copy:
    src: "{{ war_source_path }}"
    dest: "{{ war_dest_path }}"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: '0644'
  notify: Restart Tomcat

# ----------------------------------------------------------
# TASK: Ensure deployed WAR file ownership is correct
# Module: file
# Purpose:
#   - Fixes ownership and permissions of the WAR file if copied previously.
# ----------------------------------------------------------
- name: Ensure deployed WAR ownership is correct
  become: yes
  file:
    path: "{{ tomcat_install_dir }}/webapps/artisantek-app.war"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: '0644'

# ----------------------------------------------------------
# TASK: Ensure extracted WAR folder ownership is correct
# Module: file
# Purpose:
#   - Ensures that the extracted application folder (after WAR deploy)
#     is fully accessible by Tomcat.
#   - recurse: yes → recursive ownership and permission set.
# ----------------------------------------------------------
- name: Ensure extracted WAR folder ownership is correct
  become: yes
  file:
    path: "{{ tomcat_install_dir }}/webapps/artisantek-app"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    recurse: yes

# ----------------------------------------------------------
# TASK: Make Tomcat startup script executable
# Module: file
# Purpose:
#   - Ensures startup.sh has execute permissions.
#   - Prevents "permission denied" errors when starting Tomcat manually.
# ----------------------------------------------------------
- name: Make startup script executable
  become: yes
  file:
    path: "{{ tomcat_install_dir }}/bin/startup.sh"
    mode: '0755'
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"

# ----------------------------------------------------------
# TASK: Fallback – kill any lingering Tomcat Java processes
# Module: shell
# Purpose:
#   - Sometimes Tomcat processes from older runs still occupy port 8080.
#   - This step kills any such processes safely before restarting.
#   - ignore_errors: yes → prevents playbook failure if no process found.
# ----------------------------------------------------------
- name: Fallback- kill any lingering Tomcat bootstrap java processes
  become: yes
  shell: "pkill -f 'org.apache.catalina.startup.Bootstrap' || true"
  ignore_errors: yes

# ----------------------------------------------------------
# TASK: Start Tomcat server (non-blocking)
# Module: shell
# Purpose:
#   - Starts Tomcat in the background using nohup to prevent session hang.
#   - Redirects stdout/stderr to /dev/null to keep output clean.
#   - args.executable: ensures /bin/bash executes the command properly.
# ----------------------------------------------------------
- name: Start Tomcat (non-blocking)
  become: yes
  shell: "nohup {{ tomcat_install_dir }}/bin/startup.sh >/dev/null 2>&1 &"
  args:
    executable: /bin/bash
